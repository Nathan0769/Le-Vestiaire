
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  username      String?  @unique 
  email         String   @unique(map: "user_email_key")
  emailVerified Boolean  @default(false)
  image         String?


  firstName       String?
  lastName        String?
  avatar          String?
  bio             String?
  favoriteClubId  String?
  favoriteClub    Club?        @relation(fields: [favoriteClubId], references: [id])
  leaderboardAnonymous Boolean @default(true) @map("leaderboard_anonymous")
  collection      UserJersey[]
  wishlist        Wishlist[]
  ratings         Rating[]     
  sentFriendships     Friendship[] @relation("SentFriendships")
  receivedFriendships Friendship[] @relation("ReceivedFriendships")
  achievements    Achievement[]
  // ----------------------

  // Relations auth
  sessions        Session[]
  accounts        Account[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ipAddress String?
  userAgent String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String   @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Jersey {
  id          String     @id @default(cuid())
  name        String
  clubId      String
  season      String
  type        JerseyType
  brand       String
  imageUrl    String
  retailPrice Decimal?
  description String?
  slug        String?    @unique

  club       Club         @relation(fields: [clubId], references: [id])
  collection UserJersey[]
  wishlist   Wishlist[]
  ratings    Rating[]     

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clubId, season, type])
  @@map("jerseys")
}

model Rating {
  id       String @id @default(cuid())
  userId   String
  jerseyId String
  rating   Decimal    // 1 à 5 étoiles
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jersey   Jersey @relation(fields: [jerseyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jerseyId]) 
  @@map("ratings")
}

model UserJersey {
  id              String    @id @default(cuid())
  userId          String
  jerseyId        String
  size            Size?
  condition       Condition
  hasTags         Boolean   @default(false)
  personalization String?
  purchasePrice   Decimal?
  purchaseDate    DateTime?
  notes           String?
  userPhotoUrl    String?

  isGift          Boolean   @default(false)  
  isFromMysteryBox Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jersey Jersey @relation(fields: [jerseyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jerseyId])
  @@map("user_jerseys")
}

model Club {
  id           String @id @default(cuid())
  name         String
  shortName    String
  leagueId     String
  logoUrl      String
  primaryColor String

  league     League   @relation(fields: [leagueId], references: [id])
  jerseys    Jersey[]
  favoriteBy User[]

  @@map("clubs")
}

model League {
  id      String @id @default(cuid())
  name    String
  country String
  logoUrl String
  tier    Int    @default(1)

  clubs Club[]

  @@map("leagues")
}

model Wishlist {
  id       String @id @default(cuid())
  userId   String
  jerseyId String
  priority Int    @default(1)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jersey Jersey @relation(fields: [jerseyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, jerseyId])
  @@map("wishlist")
}

model Friendship {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  
  sender     User     @relation("SentFriendships", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedFriendships", fields: [receiverId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@map("friendships")
}

model Achievement {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  badgeType  String   @map("badge_type")  
  badgeMonth String?  @map("badge_month") 
  rank       Int                          
  category   String                       
  metadata   Json?                        
  earnedAt   DateTime @default(now()) @map("earned_at")
  createdAt  DateTime @default(now()) @map("created_at")
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, badgeType, badgeMonth, category], name: "unique_monthly_badge")
  @@map("achievements")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum JerseyType {
  HOME
  AWAY
  THIRD
  FOURTH
  GOALKEEPER
  SPECIAL
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum Condition {
  MINT
  EXCELLENT
  GOOD
  FAIR
  POOR
}